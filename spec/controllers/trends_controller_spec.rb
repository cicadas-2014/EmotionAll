require 'rails_helper'
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# describe TrendsController do
#   let!(:trend) { create :trend }

#   context 'trends#index' do
#     it 'assigns @recent_trends to the most recent trends from the database' do
#       get :index
#       expect(assigns(:trend)).to eq(Trend.most_recent)
#     end
#   end
# end

# describe MapController do
#   describe 'View index' do
#     let!(:trend) { create :trend }
#  	let!(:trends) { [trend, create(:trend)] }
#  	trends = Trend.most_recent
#  	trend = trends.shift
#     it { expect(response).to be_success}
#   end
# end

# describe TrendsController do
#   describe 'GET #trends' do
#   	render_views
#   	before :each do  
#   		{tweet: "Yo", trend: "yo"}.to_json
#   	end
#   	{tweet: "Yo", trend: "yo"}.to_json
#   	it "returns json content" do
#   		@trend = Trend.create(name: "Super Trends", woeid: 23424977)
#   		# map_info = Trend.map_info(@trend.id)
#   		# map_info = {tweet: "Yo", trend: "yo"}
#     	#map_info.to_json

#   		get :json, id: @trend.id
#   		# binding.pry
#   		{tweet: "Yo", trend: "yo"}.to_json
#   		expect(response).to render_template(:json)
 
#     end
#   end
# end
